//========= Copyright Valve Corporation, All rights reserved. ============//
//
// Purpose:
//
//=============================================================================//

#ifndef WEAPON_KNIFE_H
#define WEAPON_KNIFE_H

#include "basebludgeonweapon.h"
#include "basecombatcharacter.h"

#if defined( _WIN32 )
#pragma once
#endif

#ifdef HL2MP
#error weapon_knife.h must not be included in hl2mp. The windows compiler will use the wrong class elsewhere if it is.
#endif

#define	KNIFE_RANGE	75.0f
#define	KNIFE_REFIRE 0.25f
#define THROWNKNIFE_MODEL	"models/weapons/w_knife.mdl"

#define THROWNKNIFE_AIR_VELOCITY	2500
#define THROWNKNIFE_WATER_VELOCITY	1500

//-----------------------------------------------------------------------------
// Thrown Knife
//-----------------------------------------------------------------------------
class CThrownKnife : public CBaseCombatCharacter
{
	DECLARE_CLASS( CThrownKnife, CBaseCombatCharacter );

public:
	CThrownKnife() { };
	~CThrownKnife();

	Class_T Classify( void ) { return CLASS_NONE; }

public:
	void Spawn( void );
	void Precache( void );
	void BubbleThink( void );
	void KnifeTouch( CBaseEntity *pOther );
	bool CreateVPhysics( void );
	unsigned int PhysicsSolidMaskForEntity() const;
	static CThrownKnife *KnifeCreate( const Vector &vecOrigin, const QAngle &angAngles, CBasePlayer *pentOwner = NULL );

protected:

	DECLARE_DATADESC();
	//DECLARE_SERVERCLASS();
};

//-----------------------------------------------------------------------------
// CWeaponKnife
//-----------------------------------------------------------------------------

class CWeaponKnife : public CBaseHLBludgeonWeapon
{
public:
	DECLARE_CLASS( CWeaponKnife, CBaseHLBludgeonWeapon );

	DECLARE_SERVERCLASS();
	DECLARE_ACTTABLE();

	CWeaponKnife();

	float		GetRange( void )		{	return	KNIFE_RANGE;	}
	float		GetFireRate( void )		{	return	KNIFE_REFIRE;	}

	void		AddViewKick( void );
	float		GetDamageForActivity( Activity hitActivity );
	void 		ThrowKnife( void );
	virtual int WeaponMeleeAttack1Condition( float flDot, float flDist );
	void		SecondaryAttack( void );
	void 		Precache( void );

	// Animation event
	virtual void Operator_HandleAnimEvent( animevent_t *pEvent, CBaseCombatCharacter *pOperator );

private:
	// Animation event handlers
	void HandleAnimEventMeleeHit( animevent_t *pEvent, CBaseCombatCharacter *pOperator );
};

#endif // WEAPON_KNIFE_H
